name: "Shared Steps"

on:
  workflow_call:

runs:
  using: 'composite'
  steps:
    - name: "Get Latest AzOps version"
      if: ${{ env.AZOPS_MODULE_VERSION == '' }}
      shell: pwsh
      run: |
        $latestVersionUri = "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='AzOps'&`$filter=IsLatestVersion"
        $latestVersionId = (Invoke-RestMethod $latestVersionUri).properties.NormalizedVersion
        echo "::set-env name=AZOPS_MODULE_VERSION::$latestVersionId"
        
    - name: "print version"
      shell: pwsh
      run: |
        Write-Host '${{ env.AZOPS_MODULE_VERSION }}'
        Write-Host $AZOPS_MODULE_VERSION

    #
    # Cache Dependencies
    # Cache dependencies if version has not changed
    #  
    - name: Cache AzOps module
      if: ${{ env.MODULE_VERSION != '' }}
      id: cache-AzOps
      uses: actions/cache@v2
      with:
        path: ${{ env.modulesFolder }}
        key: '"AzOpsModule" | ${{env.MODULE_VERSION}}'
    
    #
    # Dependencies
    # Install required runtime modules
    #
    - name: "Dependencies"
      if: env.MODULE_VERSION == '' || steps.cache-AzOps.outputs.cache-hit != 'true' 
      shell: pwsh
      run: |
        if(-not (Test-Path -Path "${{ env.modulesFolder }}")) {
        mkdir ${{ env.modulesFolder }}
        }
        $params = @{
          Name            = 'AzOps'
          Path            = '${{ env.modulesFolder }}'
          Force           = $true
        }
        Write-Host "test"
        if('${{ !env.MODULE_VERSION }}')
        {
          Write-Host "MODULE_VERSION"
          $params.RequiredVersion = '${{env.MODULE_VERSION}}'
        }
        elseif('${{ !env.AZOPS_MODULE_VERSION }}')
        {
        Write-Host "AZOPS_MODULE_VERSION"
        $params.RequiredVersion = '${{env.AZOPS_MODULE_VERSION}}'
        }
        Save-Module @params

      #
      # Connect
      # Authenticate Azure context
      #

    - name: "Connect"
      shell: pwsh
      run: |
        $Env:PSModulePath = $Env:PSModulePath, '${{ env.modulesFolder }}' -join [IO.Path]::PathSeparator
        $credential = New-Object PSCredential -ArgumentList ${{env.ARM_CLIENT_ID}}, (ConvertTo-SecureString -String ${{env.ARM_CLIENT_SECRET}} -AsPlainText -Force)
        Connect-AzAccount -TenantId ${{env.ARM_TENANT_ID}} -ServicePrincipal -Credential $credential -SubscriptionId ${{env.ARM_SUBSCRIPTION_ID}}
